{"version":3,"sources":["css/chesscom.module.css","assets/icons/watch.svg","utils/regexes.ts","chess/ChessCom.tsx","utils/requests.ts","Tournament.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","chessCom","Chess","ChessWebAPI","queue","id","board","a","Promise","res","rej","dispatch","getTeamLiveMatchBoard","data","error","body","loadChessComMatch","getTeamLiveMatch","Piece","Map","ChessCom","props","useReducer","state","action","arr","slice","boardScores","game","games","setGame","useState","message","setMessage","setID","i","name","teams","setTeam","set","player","username","team","teamDict","setTeamDict","boards","setBoards","matchFinished","setMatchFinished","boardsFinished","setFinished","fetchChessCom","useCallback","matches","matchURL","match","regexes","console","Number","t","findIndex","v","players","Object","values","status","useEffect","ping","length","loadChessComGames","then","fetchedGames","board_scores","Date","now","end_time","x","setInterval","clearInterval","className","styles","container","map","pairing","scores","entries","g","FENBoard","fen","flip","get","white","w","rating","b","black","reverse","wrapper","boardLabel","href","url","split","pop","target","rel","line","row","p","square","piece","toLowerCase","join","errorCallback","GET","options","assign","method","axios","catch","e","response","statusText","config","defaults","baseURL","Tournament","params","loaded","setLoaded","setStatus","setPlayers","pairings","setPairings","playerDict","useMemo","dict","all","round","expanded","setExpanded","histories","Array","firstName","style","width","trim","link","find","padding","src","icons","alt","onClick","transform","colSpan","chessComLink","chessComTeamLink","App","basename","process","render","location","exact","path","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11c8114c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"chesscom_wrapper__3vwwR\",\"container\":\"chesscom_container__AGg5n\",\"boardLabel\":\"chesscom_boardLabel__1N2Qy\",\"board\":\"chesscom_board__3LGEQ\",\"fade-in\":\"chesscom_fade-in__15-gn\",\"row\":\"chesscom_row__17flm\",\"square\":\"chesscom_square___JdY5\",\"W\":\"chesscom_W__1Kbfl\",\"B\":\"chesscom_B__misXA\"};","module.exports = __webpack_public_path__ + \"static/media/watch.ddf443c3.svg\";","export const chessCom = /chess\\.com\\/(?:live#tm=|club\\/matches\\/live\\/(?:[a-z-]+\\/)?)([0-9]+)/;","import React, { useReducer, useCallback, useEffect, ReactElement, useState } from 'react';\nimport FENBoard from 'fen-chess-board';\nimport ChessWebAPI, { BoardData, MatchData, Game, ChessPlayer } from 'chess-web-api';\nimport * as regexes from '../utils/regexes';\nimport styles from '../css/chesscom.module.css';\nimport { FaChessPawn, FaChessKing, FaChessKnight, FaChessBishop, FaChessRook, FaChessQueen, FaChessBoard } from 'react-icons/fa';\nimport { IoMdSquare, IoMdSquareOutline } from 'react-icons/io';\n\nconst Chess = new ChessWebAPI({ queue: true });\n\nasync function loadChessComGames(id: number, board: number): Promise<BoardData> {\n    return new Promise((res, rej) => {\n        Chess.dispatch(Chess.getTeamLiveMatchBoard, (data: { body: BoardData }, error) => {\n            if (error) return rej(error);\n            res(data.body);\n        }, [id, board]);\n    });\n}\n\nasync function loadChessComMatch(id: number): Promise<MatchData> {\n    return new Promise((res, rej) => {\n        Chess.dispatch(Chess.getTeamLiveMatch, (data: { body: MatchData }, error) => {\n            if (error) return rej(error);\n            res(data.body);\n        }, [id]);\n    });\n}\n\ninterface ChessComProps {\n    matchURL: string\n}\n\nexport function colour(piece: string): 'W' | 'B' {\n    if (piece.toLowerCase() === piece) return 'B';\n    return 'W';\n}\n\nconst Piece: Map<string, ReactElement> = new Map([\n    ['p', <FaChessPawn />],\n    ['n', <FaChessKnight />],\n    ['b', <FaChessBishop />],\n    ['r', <FaChessRook />],\n    ['q', <FaChessQueen />],\n    ['k', <FaChessKing />]\n])\n\nexport default function ChessCom(props: ChessComProps) {\n\n    const [games, setGame] = useReducer((state: {game: Game, boardScores: {[key: string]: number}}[], action: {\n        board: number,\n        boardScores: {[key: string]: number}\n        game: Game\n    }) => {\n        let arr = state.slice(0);\n        arr[action.board] = {\n            boardScores: action.boardScores,\n            game: action.game\n        };\n        return arr;\n    }, []);\n    const [message, setMessage] = useState('');\n    const [id, setID] = useState(0);\n    const [teams, setTeam] = useReducer((state: [string, string], action: {\n        name: string\n        i: number\n    }) => {\n        state[action.i] = action.name;\n        return state;\n    }, ['', '']);\n    const [teamDict, setTeamDict] = useReducer((state: Map<string, number>, action: {player: ChessPlayer, team: number}) => {\n        state.set(action.player.username, action.team);\n        return state;\n    }, new Map());\n    const [boards, setBoards] = useState(0);\n    const [matchFinished, setMatchFinished] = useState(false);\n    const [boardsFinished, setFinished] = useReducer((state: boolean[], action: {\n       board: number,\n       set: boolean\n    }) => {\n        let arr = state.slice(0);\n        arr[action.board] = action.set;\n        return arr;\n    }, [])\n\n    const fetchChessCom = useCallback(async () => {\n        let matches = props.matchURL.match(regexes.chessCom);\n        if (!matches) return console.error('Invalid URL: ', props.matchURL);\n        let id = Number(matches[1]);\n        setID(id);\n        try {\n            let body = await loadChessComMatch(id);\n            setBoards(body.boards);\n            for (let t of Object.values(body.teams)) {\n                let i = teams.findIndex(v => !v || v === t.name);\n                setTeam({ name: t.name, i });\n                for (let player of t.players) {\n                    setTeamDict({\n                        player,\n                        team: i\n                    });\n                }\n            }\n            if (body.status === 'finished' || body.status === 'scheduled') setMatchFinished(true);\n        } catch (e) {\n            console.error(e);\n            setMessage('Match has not yet started!');\n        }\n    }, [props.matchURL, teams]);\n\n    useEffect(() => {\n        fetchChessCom();\n    }, [fetchChessCom]);\n\n    const ping = useCallback(() => {\n        if (!id || !boards) return;\n        if (matchFinished && games.length) return;\n        for (let i = 1; i < boards; i++) {\n            if (boardsFinished[i]) continue;\n            loadChessComGames(id, i)\n                .then((fetchedGames) => {\n                    let game = fetchedGames.games[fetchedGames.games.length - 1];\n                    setGame({\n                        game: game,\n                        boardScores: fetchedGames.board_scores,\n                        board: i\n                    });\n                    if (Date.now() > game.end_time) setFinished({board: i, set: true});\n                });\n        }\n\n    }, [id, boards, matchFinished, boardsFinished, games.length])\n\n    useEffect(() => {\n        let x = setInterval(ping, 1000);\n        return () => clearInterval(x);\n    }, [ping]);\n\n    if (message || !games.length) return <div>{message}</div>\n\n    return (\n        <div className={styles.container}>\n            {games.map((pairing) => {\n                let scores = Object.entries(pairing.boardScores);\n                let g = pairing.game;\n                let board = new FENBoard(g.fen).board;\n                let flip = teamDict.get(g.white.username);\n                let [w, b] = [\n                    <>\n                        {g.white.username} ({g.white.rating}){' '}\n                        <IoMdSquareOutline />\n                    </>,\n                    <>\n                        {g.black.username} ({g.black.rating}){' '}\n                        <IoMdSquare />\n                    </>\n                ];\n                if (scores[0][0] === g.black.username && flip) scores = scores.reverse();\n                return (\n                    <div className={styles.wrapper}>\n                        <div className={styles.boardLabel}>\n                            <span className='bold'>{scores[0][1]}</span>\n                            <a href={'https://www.chess.com/live/game/' + g.url.split('/').pop()} target='_blank' rel='noopener noreferrer'>\n                                <FaChessBoard />\n                            </a>\n                            <span className='bold'>{scores[1][1]}</span>\n                        </div>\n                        <div>{flip ? w : b}{' '}{teams[0]}</div>\n                            <div className={styles.board}>\n                                {board.map(line => {\n                                    return (\n                                        <div className={styles.row}>\n                                            {line.map(p => {\n                                                return (\n                                                    <div className={[styles.square, styles[colour(p)]].join(' ')}>\n                                                        {Piece.get(p.toLowerCase())}\n                                                    </div>\n                                                );\n                                            })}\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        <div>{flip ? b : w}{' '}{teams[1]}</div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}","import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\nlet errorCallback: (message: string) => void = () => {};\n\nconst useProd = true;\nexport const server = useProd ? 'https://api.oxfordchess.co.uk/' : 'http://localhost:8080';\n\naxios.defaults.baseURL = server;\n\n\nexport function GET(options: AxiosRequestConfig): Promise<any> {\n\toptions = Object.assign(options, {\n\t\tmethod: 'GET'\n\t});\n\treturn axios(options)\n\t\t.then((res: AxiosResponse<any>) => res.data)\n\t\t.catch((e: AxiosError) => {\n\t\t\tconsole.error(e);\n\t\t\tif (e.response) errorCallback([e.response.status, e.response.statusText, ':', '/' + e.response.config.url?.split('/').pop()].join(' '));\n\t\t\tthrow e;\n\t\t});\n}\n\nexport function POST(options: AxiosRequestConfig): Promise<any> {\n\toptions = Object.assign(options, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t});\n\treturn axios(options)\n\t\t.then((res: AxiosResponse<any>) => res.data)\n\t\t.catch((e) => {\n\t\t\tif (e && e.response && e.response.data) errorCallback(e.response.data);\n\t\t\tthrow e;\n\t\t});\n}\n\nexport function setErrorCallback(c: (message: string) => void) {\n\terrorCallback = c;\n}","import React, { useEffect, useState, useMemo } from 'react';\nimport './App.css';\nimport { TournamentProps, TournamentStatus, Player, PairingObject } from './interfaces';\nimport ChessCom from './chess/ChessCom';\nimport { GET } from './utils/requests';\nimport { AiOutlineLeft } from 'react-icons/ai';\nimport * as icons from './assets/icons/';\nimport * as regexes from './utils/regexes';\n\nexport default function Tournament(props: TournamentProps) {\n\n    const id = props.match.params.id\n    const [loaded, setLoaded] = useState(false);\n    const [state, setState] = useState({});\n    const [settings, setSettings] = useState({});\n    const [status, setStatus] = useState({} as TournamentStatus);\n    const [players, setPlayers] = useState([] as Player[]);\n    const [pairings, setPairings] = useState([] as PairingObject[]);\n\n    const playerDict: Map<string, Player> = useMemo(() => {\n        if (!players.length) return new Map();\n        let dict = new Map();\n        for (let p of players) dict.set(p.id, p);\n        return dict;\n    }, [players]);\n\n    useEffect(() => {\n        Promise.all([\n            GET({ url: '/tournament/' + id + '/fetchPlayers'})\n                .then(setPlayers)\n                .catch(() => {}),\n            GET({ url: '/tournament/' + id + '/getPairings'})\n                .then(setPairings)\n                .catch(() => {}),\n            GET({ url: '/tournament/' + id + '/getStatus'})\n                .then(setStatus)\n                .catch(() => {})\n        ]).then(() => setLoaded(true)) /*\n        GET({ url: '/tournament/' + id + '/getSettings'})\n            .then(setSettings);\n        GET({ url: '/tournament/' + id + '/getState'})\n            .then(setState);*/\n\n    }, [setPairings, setPlayers]);\n\n    const round = status.round || 0;\n\n    const [expanded, setExpanded] = useState('');\n\n    useEffect(() => {\n        if (!round) return;\n        let histories = new Array(round + 1);\n        for (let i = 1; i < round + 1; i++) histories[i] = {\n            match: 0,\n            game: 0\n        };\n        playerDict.set('bye', {\n            id: 'bye',\n            firstName: 'BYE',\n            histories\n        } as any as Player);\n    }, [playerDict, round]);\n\n    if (!loaded) return null;\n\n    return (\n\n        <div id='main'>\n            <div className='container'>\n                    <h1>{status.name}</h1>\n\n                    <section>\n                        <h2>Pairings</h2>\n                        <table className='download-table full-width'>\n                            <thead>\n                                <tr>\n                                    <td style={{width: '30%'}}>White</td>\n                                    <td style={{width: '12.5%'}}></td>\n                                    <td style={{width: '5%'}}></td>\n                                    <td style={{width: '5%'}}></td>\n                                    <td style={{width: '5%'}}></td>\n                                    <td style={{width: '12.5%'}}></td>\n                                    <td style={{width: '30%'}}>Black</td>\n                                </tr>\n                            </thead>\n                            <tbody>                                \n                                {pairings.map((row) => {\n                                    let id = [row[0].trim(), row[1].trim()].join('.')\n                                    let w = playerDict.get(row[0].trim());\n                                    let b = playerDict.get(row[1].trim());\n                                    let link = Object.values(row[2]).find(v => v);\n                                    let matches = link?.match(regexes.chessCom);\n                                    if (!matches) link = '';\n                                    else link = 'https://www.chess.com/club/matches/live/' + matches[1];\n                                    return (\n                                        <>\n                                            <tr>\n                                                <td><div className='playerName'>{w?.firstName}</div></td>\n                                                <td style={{padding: 0}}>\n                                                    {link ? <a className='button' href={link.trim()} target='_blank' rel='noopener noreferrer'>\n                                                        <img className='icon' src={icons.watch} alt={'Watch games'}/>\n                                                    </a> : null}\n                                                </td>                                                \n                                                <td className={'bold'}>{w?.histories[round]?.game}</td>\n                                                <td>-</td>\n                                                <td className={'bold'}>{b?.histories[round]?.game}</td>\n                                                <td style={{padding: 0}}>\n                                                    {link ? <div className='button' onClick={() => setExpanded(expanded ? '' : id)}>\n                                                        <AiOutlineLeft style={{\n                                                            transform: expanded === id ? 'rotate(-90deg)' : 'rotate(0deg)'\n                                                        }}/>\n                                                    </div> : null}\n                                                </td>\n                                                <td><div className='playerName'>{b?.firstName}</div></td>\n                                            </tr>\n                                            {link && expanded === id? <tr>\n                                                <td colSpan={100}>\n                                                    {row[2].chessComLink || row[2].chessComTeamLink ?\n                                                        row[2].chessComTeamLink ?\n                                                            <ChessCom matchURL={row[2].chessComTeamLink} /> :\n                                                            null :\n                                                        null\n                                                    }\n                                                </td>\n                                            </tr> : null}\n                                        </>\n                                    )\n                                })}\n                            </tbody>\n                        </table>\n                    </section>\n\n\n            </div>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Tournament from './Tournament';\nimport './App.css';\n\nfunction App(): ReactElement {\n  return (\n      <Router basename={process.env.PUBLIC_URL}>\n            <Route render={({location}) => {\n                return (\n                    <Switch location={location}>\n                        <Route exact path='/tournament/:id/' render={(props) => <Tournament {...props} />} />\n                    </Switch>\n                );\n            }}/>\n        </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}