{"version":3,"sources":["utils/requests.ts","Tournament.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["errorCallback","GET","options","Object","assign","method","axios","then","res","data","catch","e","console","error","response","status","statusText","config","url","split","pop","join","Tournament","props","id","match","params","useState","setStatus","players","setPlayers","pairings","setPairings","useEffect","round","className","name","map","row","w","find","p","b","firstName","histories","game","defaults","baseURL","App","render","location","exact","path","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0SACIA,EAA2C,aAOxC,SAASC,EAAIC,GAInB,OAHAA,EAAUC,OAAOC,OAAOF,EAAS,CAChCG,OAAQ,QAEFC,IAAMJ,GACXK,MAAK,SAACC,GAAD,OAA6BA,EAAIC,QACtCC,OAAM,SAACC,GAAmB,IAAD,EAGzB,MAFAC,QAAQC,MAAMF,GACVA,EAAEG,UAAUd,EAAc,CAACW,EAAEG,SAASC,OAAQJ,EAAEG,SAASE,WAAY,IAAK,eAAML,EAAEG,SAASG,OAAOC,WAAxB,aAAM,EAAuBC,MAAM,KAAKC,QAAOC,KAAK,MAC5HV,KCsCM,SAASW,EAAWC,GAE/B,IAAMC,EAAKD,EAAME,MAAMC,OAAOF,GAFyB,EAG7BG,mBAAS,IAHoB,gCAIvBA,mBAAS,KAJc,gCAK3BA,mBAAS,KALkB,mBAKhDZ,EALgD,KAKxCa,EALwC,OAMzBD,mBAAS,IANgB,mBAMhDE,EANgD,KAMvCC,EANuC,OAOvBH,mBAAS,IAPc,mBAOhDI,EAPgD,KAOtCC,EAPsC,KASvDC,qBAAU,WACNhC,EAAI,CAAEiB,IAAK,eAAiBM,EAAK,kBAC5BjB,KAAKuB,GACV7B,EAAI,CAAEiB,IAAK,eAAiBM,EAAK,iBAC5BjB,KAAKyB,GACV/B,EAAI,CAAEiB,IAAK,eAAiBM,EAAK,eAC5BjB,KAAKqB,KAMX,CAACI,EAAaF,IAEjB,IAAMI,EAAQnB,EAAOmB,MAEvB,OAED,yBAAKV,GAAG,QACP,yBAAKW,UAAU,aACb,4BAAKpB,EAAOqB,MAEZ,iCACC,wCACA,2BAAOD,UAAU,6BAChB,+BACC,4BACC,qCACA,6BACA,6BACA,6BACA,uCAGF,+BACuBJ,EAASM,KAAI,SAACC,GAAS,IAAD,QACfC,EAAIV,EAAQW,MAAK,SAAAC,GAAC,OAAIA,EAAEjB,KAAOc,EAAI,MACnCI,EAAIb,EAAQW,MAAK,SAAAC,GAAC,OAAIA,EAAEjB,KAAOc,EAAI,MACvC,OACI,4BACI,mCAAKC,QAAL,IAAKA,OAAL,EAAKA,EAAGI,WACR,wBAAIR,WAAY,OAADO,QAAC,IAADA,GAAA,UAAAA,EAAGE,UAAUV,UAAb,eAAqBW,MAAO,OAAS,IAApD,OAAyDN,QAAzD,IAAyDA,GAAzD,UAAyDA,EAAGK,UAAUV,UAAtE,aAAyD,EAAqBW,MAC9E,6BACA,wBAAIV,WAAY,OAADO,QAAC,IAADA,GAAA,UAAAA,EAAGE,UAAUV,UAAb,eAAqBW,MAAO,OAAS,IAApD,OAAyDH,QAAzD,IAAyDA,GAAzD,UAAyDA,EAAGE,UAAUV,UAAtE,aAAyD,EAAqBW,MAC9E,mCAAKH,QAAL,IAAKA,OAAL,EAAKA,EAAGC,oBDvGhDrC,IAAMwC,SAASC,QAFO,iCEkBPC,MAff,WACE,OACI,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOC,OAAQ,YAAiB,IAAfC,EAAc,EAAdA,SAEb,OACI,kBAAC,IAAD,CAAQA,SAAUA,GACd,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,mBAAmBH,OAAQ,SAAC1B,GAAD,OAAW,kBAACD,EAAeC,YCD5E8B,QACW,cAA7BC,OAAOJ,SAASK,UAEe,UAA7BD,OAAOJ,SAASK,UAEhBD,OAAOJ,SAASK,SAAS9B,MACvB,2DCZN+B,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdtD,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMoD,c","file":"static/js/main.5f278db9.chunk.js","sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\nlet errorCallback: (message: string) => void = () => {};\n\nexport const server = 'https://api.oxfordchess.co.uk/';\n\naxios.defaults.baseURL = server;\n\n\nexport function GET(options: AxiosRequestConfig): Promise<any> {\n\toptions = Object.assign(options, {\n\t\tmethod: 'GET'\n\t});\n\treturn axios(options)\n\t\t.then((res: AxiosResponse<any>) => res.data)\n\t\t.catch((e: AxiosError) => {\n\t\t\tconsole.error(e);\n\t\t\tif (e.response) errorCallback([e.response.status, e.response.statusText, ':', '/' + e.response.config.url?.split('/').pop()].join(' '));\n\t\t\tthrow e;\n\t\t});\n}\n\nexport function POST(options: AxiosRequestConfig): Promise<any> {\n\toptions = Object.assign(options, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t});\n\treturn axios(options)\n\t\t.then((res: AxiosResponse<any>) => res.data)\n\t\t.catch((e) => {\n\t\t\tif (e && e.response && e.response.data) errorCallback(e.response.data);\n\t\t\tthrow e;\n\t\t});\n}\n\nexport function setErrorCallback(c: (message: string) => void) {\n\terrorCallback = c;\n}","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { GET } from './utils/requests';\n\ninterface TournamentProps {\n    match: {\n        params: {\n            id: string\n        }\n    }\n}\n\ninterface Player {\n\tid: string\n\ttournamentId: string\n\tfirstName: string \n\tlastName: string\n\trating: number\n\n\tperformanceRating: number\n\texpectedScore: number\n\texpectedGameScore: number\n\twhiteTotal: number\n\tscore: number\n\tgamePoints: number\n\tplayed: number\n\n\tactive: boolean\n\tisPlaying: string\n\thistories: History[]\n\n\tcreatedAt: string\n\tupdatedAt: string\n}\n\ntype GameScore = 0 | 0.5 | 1;\n\ninterface History {\n    id: string\n\toppRating: number\n\texpected: number\n    colour: 'W' | 'B' | 'N'\n\tgame: number | undefined\n    match: GameScore | undefined\n\tplayed: number\n}\n\ninterface TournamentStatus {\n\tround: number\n\tname: string\n\tid: string\n\tactive?: boolean\n}\n\nexport default function Tournament(props: TournamentProps) {\n\n    const id = props.match.params.id\n    const [state, setState] = useState({});\n    const [settings, setSettings] = useState({});\n    const [status, setStatus] = useState({} as TournamentStatus);\n    const [players, setPlayers] = useState([] as Player[]);\n    const [pairings, setPairings] = useState([] as [string, string][]);\n\n    useEffect(() => {\n        GET({ url: '/tournament/' + id + '/fetchPlayers'})\n            .then(setPlayers);\n        GET({ url: '/tournament/' + id + '/getPairings'})\n            .then(setPairings);\n        GET({ url: '/tournament/' + id + '/getStatus'})\n            .then(setStatus); /*\n        GET({ url: '/tournament/' + id + '/getSettings'})\n            .then(setSettings);\n        GET({ url: '/tournament/' + id + '/getState'})\n            .then(setState);*/\n\n    }, [setPairings, setPlayers]);\n\n    const round = status.round;\n\n  return (\n\n\t<div id='main'>\n\t\t<div className='container'>\n\t\t\t\t<h1>{status.name}</h1>\n\n\t\t\t\t<section>\n\t\t\t\t\t<h2>Pairings</h2>\n\t\t\t\t\t<table className='download-table full-width'>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>White</td>\n\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t<td>Black</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n                            {pairings.map((row) => {\n                                let w = players.find(p => p.id === row[0]);\n                                let b = players.find(p => p.id === row[1]);\n                                return (\n                                    <tr>\n                                        <td>{w?.firstName}</td>\n                                        <td className={b?.histories[round]?.game ? 'bold' : ''}>{w?.histories[round]?.game}</td>\n                                        <td />\n                                        <td className={b?.histories[round]?.game ? 'bold' : ''}>{b?.histories[round]?.game}</td>\n                                        <td>{b?.firstName}</td>\n                                    </tr>\n                                )\n                            })}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</section>\n\n\n\t\t</div>\n\t</div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport logo from './logo.svg';\nimport Tournament from './Tournament';\nimport './App.css';\n\nfunction App() {\n  return (\n      <Router>\n            <Route render={({location}) => {\n                                \n                return (\n                    <Switch location={location}>\n                        <Route exact path='/tournament/:id/' render={(props) => <Tournament {...props} />} />\n                    </Switch>\n                );\n            }}/>\n        </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}