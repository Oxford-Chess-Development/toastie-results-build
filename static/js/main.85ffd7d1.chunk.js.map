{"version":3,"sources":["css/chesscom.module.css","assets/icons/watch.svg","utils/regexes.ts","chess/ChessCom.tsx","utils/requests.ts","Tournament.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","chessCom","Chess","ChessWebAPI","queue","loadChessComGames","id","board","a","Promise","res","rej","dispatch","getTeamLiveMatchBoard","data","error","body","loadChessComMatch","getTeamLiveMatch","Piece","Map","ChessCom","props","useState","enforceBoards","boards","setBoards","useReducer","state","action","arr","slice","boardScores","game","games","setGame","setID","i","name","teams","setTeam","Object","assign","player","username","toLowerCase","team","teamDict","setTeamDict","matchFinished","setMatchFinished","set","boardsFinished","setFinished","fetchChessCom","useCallback","matches","matchURL","match","regexes","console","Number","status","t","findIndex","v","players","values","useEffect","ping","length","x","then","fetchedGames","board_scores","Date","now","end_time","catch","e","message","includes","setInterval","clearInterval","className","styles","container","map","pairing","scores","entries","g","flip","black","w","white","rating","b","reverse","FENBoard","fen","wrapper","boardLabel","href","url","split","pop","target","rel","line","row","p","square","piece","join","get","errorCallback","log","process","prodServer","GET","options","method","axios","response","statusText","config","defaults","baseURL","Tournament","params","loaded","setLoaded","setStatus","setPlayers","pairings","setPairings","playerDict","useMemo","dict","time","timeDict","setTime","populateTimeDict","link","find","start_time","meta","valueOf","all","round","expanded","setExpanded","histories","Array","firstName","toString","style","width","trim","undefined","key","padding","onClick","src","icons","alt","colSpan","chessComLink","chessComTeamLink","App","basename","render","location","exact","path","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.85ffd7d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"chesscom_wrapper__3vwwR\",\"container\":\"chesscom_container__AGg5n\",\"boardLabel\":\"chesscom_boardLabel__1N2Qy\",\"board\":\"chesscom_board__3LGEQ\",\"fade-in\":\"chesscom_fade-in__15-gn\",\"row\":\"chesscom_row__17flm\",\"square\":\"chesscom_square___JdY5\",\"W\":\"chesscom_W__1Kbfl\",\"B\":\"chesscom_B__misXA\"};","module.exports = __webpack_public_path__ + \"static/media/watch.ddf443c3.svg\";","export const chessCom = /chess\\.com\\/(?:live#tm=|club\\/matches\\/live\\/(?:[a-z-]+\\/)?)([0-9]+)/;","import React, { useReducer, useCallback, useEffect, ReactElement, useState } from 'react';\nimport FENBoard from 'fen-chess-board';\nimport ChessWebAPI, { BoardData, MatchData, Game, ChessPlayer } from 'chess-web-api';\nimport * as regexes from '../utils/regexes';\nimport styles from '../css/chesscom.module.css';\nimport { FaChessPawn, FaChessKing, FaChessKnight, FaChessBishop, FaChessRook, FaChessQueen, FaChessBoard } from 'react-icons/fa';\nimport { IoMdSquare, IoMdSquareOutline } from 'react-icons/io';\n/*\nFENBoard.constructor.prototype.flip = (): string[][] => {\n    let fen = this.board;\n    return this.board.map(row => row.reverse()).reverse();\n}*/\n\nconst Chess = new ChessWebAPI({ queue: true });\n\nexport async function loadChessComGames(id: number, board: number): Promise<BoardData> {\n    return new Promise((res, rej) => {\n        Chess.dispatch(Chess.getTeamLiveMatchBoard, (data: { body: BoardData }, error) => {\n            if (error) return rej(error);\n            res(data.body);\n        }, [id, board]);\n    });\n}\n\nexport async function loadChessComMatch(id: number): Promise<MatchData> {\n    return new Promise((res, rej) => {\n        Chess.dispatch(Chess.getTeamLiveMatch, (data: { body: MatchData }, error) => {\n            if (error) return rej(error);\n            res(data.body);\n        }, [id]);\n    });\n}\n\nexport function colour(piece: string): 'W' | 'B' {\n    if (piece.toLowerCase() === piece) return 'B';\n    return 'W';\n}\n\nconst Piece: Map<string, ReactElement> = new Map([\n    ['p', <FaChessPawn />],\n    ['n', <FaChessKnight />],\n    ['b', <FaChessBishop />],\n    ['r', <FaChessRook />],\n    ['q', <FaChessQueen />],\n    ['k', <FaChessKing />]\n]);\n\ninterface ChessComProps {\n    matchURL: string\n    enforceBoards: number | undefined\n}\n\nexport default function ChessCom(props: ChessComProps) {\n\n    const [boards, setBoards] = useState(props.enforceBoards || 20);\n    const [games, setGame] = useReducer((state: {game: Game, boardScores: {[key: string]: number}}[], action: {\n        board: number,\n        boardScores: {[key: string]: number}\n        game: Game\n    }) => {\n        let arr = state.slice(0);\n        arr[action.board] = {\n            boardScores: action.boardScores,\n            game: action.game\n        };\n        return arr;\n    }, []);\n    const [id, setID] = useState(0);\n    const [teams, setTeam] = useReducer((state: [string, string], action: {\n        name: string\n        i: number\n    }) => {\n        state[action.i] = action.name;\n        return state;\n    }, ['', '']);\n    const [teamDict, setTeamDict] = useReducer((state: {[key: string]: number}, action: {player: ChessPlayer, team: number}) => {\n        let res = Object.assign({}, state);\n        res[action.player.username.toLowerCase()] = action.team;\n        return res;\n    }, {});\n    const [matchFinished, setMatchFinished] = useState(false);\n    const [boardsFinished, setFinished] = useReducer((state: boolean[], action: {\n       board: number,\n       set: boolean\n    }) => {\n        let arr = state.slice(0);\n        arr[action.board] = action.set;\n        return arr;\n    }, []);\n\n    const fetchChessCom = useCallback(async () => {\n        let matches = props.matchURL.match(regexes.chessCom);\n        if (!matches) return console.error('Invalid URL: ', props.matchURL);\n        let id = Number(matches[1]);\n        try {\n            let body = await loadChessComMatch(id);\n            if (body.boards) setBoards(body.boards);\n            if (body.status === 'finished' || body.status === 'scheduled') setMatchFinished(true);\n            for (let t of Object.values(body.teams)) {\n                let i = teams.findIndex(v => !v || v === t.name);\n                setTeam({ name: t.name, i });\n                for (let player of t.players) {\n                    setTeamDict({\n                        player,\n                        team: i\n                    });\n                }\n            }\n        } catch (e) {\n            console.error(e);\n        }\n        setID(id);\n    }, [props.matchURL, teams]);\n\n    useEffect(() => {\n        fetchChessCom();\n    }, [fetchChessCom]);\n\n    const ping = useCallback(async () => {\n        if (!id) return;\n        if (matchFinished && games.length) return;\n        for (let i = 1; i < boards + 1; i++) {\n            if (boardsFinished[i]) continue;\n            let x = loadChessComGames(id, i)\n                .then((fetchedGames) => {\n                    let game = fetchedGames.games[fetchedGames.games.length - 1];\n                    setGame({\n                        game: game,\n                        boardScores: fetchedGames.board_scores,\n                        board: i\n                    });\n                    if (Date.now() > game.end_time) setFinished({board: i, set: true});\n                    return true;\n                })\n                .catch((e) => {\n                    if (e.message.includes('doesn\\'t have board')) {\n                        setBoards(i - 1);\n                        return false;\n                    }\n                    return true;\n                });\n            if (boards === (props.enforceBoards || 20)) {\n                if (await x === false) break;\n            }\n        }\n\n    }, [id, boards, matchFinished, boardsFinished, games.length])\n\n    useEffect(() => {\n        let x = setInterval(ping, 1000);\n        return () => clearInterval(x);\n    }, [ping]);\n\n    if (!games.length && !boards) return <div>Match has not yet started!</div>\n\n    return (\n        <div className={styles.container}>\n            {games.map((pairing, i) => {\n                if (!pairing) return null;\n                let scores = Object.entries(pairing.boardScores);\n                let g = pairing.game;\n                let flip = teamDict[g.black.username.toLowerCase()];    // team 1 is black\n                let [w, b] = [\n                    <>\n                        {g.white.username} ({g.white.rating}){' '}\n                        <IoMdSquareOutline />\n                    </>,\n                    <>\n                        {g.black.username} ({g.black.rating}){' '}\n                        <IoMdSquare />\n                    </>\n                ];\n                if (flip) scores = scores.reverse();\n                let fen = new FENBoard(g.fen);\n                let board = fen.board;//flip ? fen.board : fen.flip;\n                return (\n                    <div className={styles.wrapper}>\n                        <div className={styles.boardLabel}>\n                            <span className='bold'>{scores[0][1]}</span>\n                            <a href={'https://www.chess.com/live/game/' + g.url.split('/').pop()} target='_blank' rel='noopener noreferrer'>\n                                <FaChessBoard />\n                            </a>\n                            <span className='bold'>{scores[1][1]}</span>\n                        </div>\n                        <div>{flip ? w : b}{' '}{teams[0]}</div>\n                            <div className={styles.board}>\n                                {board.map(line => {\n                                    return (\n                                        <div className={styles.row}>\n                                            {line.map(p => {\n                                                return (\n                                                    <div className={[styles.square, styles[colour(p)]].join(' ')}>\n                                                        {Piece.get(p.toLowerCase())}\n                                                    </div>\n                                                );\n                                            })}\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        <div>{flip ? b : w}{' '}{teams[1]}</div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}","import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\nimport { useProd, prodServer, server } from '../config.json';\nlet errorCallback: (message: string) => void = () => {};\n\nexport const isDev = process.env.NODE_ENV === 'development'; //detects a react dev build\n\nconsole.log('isDev', isDev);\nconst ping = !isDev || useProd ? prodServer : server;\nexport { ping as server };\n\naxios.defaults.baseURL = ping;\n\n\nexport function GET(options: AxiosRequestConfig): Promise<any> {\n\toptions = Object.assign(options, {\n\t\tmethod: 'GET'\n\t});\n\treturn axios(options)\n\t\t.then((res: AxiosResponse<any>) => res.data)\n\t\t.catch((e: AxiosError) => {\n\t\t\tconsole.error(e);\n\t\t\tif (e.response) errorCallback([e.response.status, e.response.statusText, ':', '/' + e.response.config.url?.split('/').pop()].join(' '));\n\t\t\tthrow e;\n\t\t});\n}\n\nexport function POST(options: AxiosRequestConfig): Promise<any> {\n\toptions = Object.assign(options, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t});\n\treturn axios(options)\n\t\t.then((res: AxiosResponse<any>) => res.data)\n\t\t.catch((e) => {\n\t\t\tif (e && e.response && e.response.data) errorCallback(e.response.data);\n\t\t\tthrow e;\n\t\t});\n}\n\nexport function setErrorCallback(c: (message: string) => void) {\n\terrorCallback = c;\n}\n\n/**\n * \n\n    startRequests: async function() {\n        try {\n            while (this._requests.length > 0) {\n                if (!this._running) this._running = true;\n                let request = this.dequeue();\n                let method = request.method;\n                let callback = request.callback;\n                let error = null;\n                let response = await method(...request.parameters, request.options)\n                    .catch((e) => error = e);\n                callback(response, error, ...request.callbackParamerters);\n            }\n            this._running = false;\n        } catch(error) {\n            throw error;\n        }\n    },\n */","import React, { useEffect, useState, useMemo, useCallback, useReducer } from 'react';\nimport './App.css';\nimport { TournamentProps, TournamentStatus, Player, PairingObject } from './interfaces';\nimport ChessCom, { loadChessComMatch } from './chess/ChessCom';\nimport { GET } from './utils/requests';\nimport { AiOutlineLeft } from 'react-icons/ai';\nimport * as icons from './assets/icons/';\nimport * as regexes from './utils/regexes';\nimport { FaLink } from 'react-icons/fa';\n\nexport default function Tournament(props: TournamentProps) {\n\n    const id = props.match.params.id\n    const [loaded, setLoaded] = useState(false);\n    const [state, setState] = useState({});\n    const [settings, setSettings] = useState({});\n    const [status, setStatus] = useState({} as TournamentStatus);\n    const [players, setPlayers] = useState([] as Player[]);\n    const [pairings, setPairings] = useState([] as PairingObject[]);\n\n    const playerDict: Map<string, Player> = useMemo(() => {\n        if (!players.length) return new Map();\n        let dict = new Map();\n        for (let p of players) dict.set(p.id, p);\n        return dict;\n    }, [players]);\n\n    const [timeDict, setTime] = useReducer((state: {[key: string]: (number | undefined)[]}, action: {\n        id: string\n        time: number\n        players?: number\n    }) => {\n        let res = Object.assign({}, state);\n        res[action.id] = [action.time, action.players];\n        return res;\n    }, {});\n\n    const populateTimeDict = useCallback(async () => {\n        for (let row of pairings) {\n            let link = Object.values(row[2]).find(v => v);\n            if (!link) continue;\n            let matches = link.match(regexes.chessCom) as RegExpMatchArray;\n            if (!matches) link = '';\n            else link = 'https://www.chess.com/club/matches/live/' + matches[1];\n            let id = Number(matches[1]);\n            loadChessComMatch(id)\n                .then((body) => setTime({id: matches[1], time: body.start_time * 1000}))\n                .catch(async (e) => {\n                    if (e.message.includes('not found')) {\n                        let meta = await GET({\n                            url: '/tournament/' + props.match.params.id + '/scrapeChessComTeamPage',\n                            params: {\n                                url: link\n                            }\n                        });\n                        setTime({\n                            id: matches[1],\n                            time: new Date(meta['Start Time']).valueOf(),\n                            players: meta['Players per Team']\n                        });\n                    }\n                    else console.error(e);\n                });\n        }\n    }, [pairings, setTime])\n    useEffect(() => {\n        populateTimeDict();\n    }, [populateTimeDict]);\n\n    useEffect(() => {\n        Promise.all([\n            GET({ url: '/tournament/' + id + '/fetchPlayers'})\n                .then(setPlayers)\n                .catch(() => {}),\n            GET({ url: '/tournament/' + id + '/getPairings'})\n                .then(setPairings)\n                .catch(() => {}),\n            GET({ url: '/tournament/' + id + '/getStatus'})\n                .then(setStatus)\n                .catch(() => {})\n        ]).then(() => setLoaded(true)) /*\n        GET({ url: '/tournament/' + id + '/getSettings'})\n            .then(setSettings);\n        GET({ url: '/tournament/' + id + '/getState'})\n            .then(setState);*/\n\n    }, [setPairings, setPlayers]);\n\n    const round = status.round || 0;\n\n    const [expanded, setExpanded] = useState('');\n\n    useEffect(() => {\n        if (!round) return;\n        let histories = new Array(round + 1);\n        for (let i = 1; i < round + 1; i++) histories[i] = {\n            match: 0,\n            game: 0\n        };\n        playerDict.set('bye', {\n            id: 'bye',\n            firstName: 'BYE',\n            histories\n        } as any as Player);\n    }, [playerDict, round]);\n\n    if (!loaded) return null;\n\n    return (\n\n        <div id='main'>\n            <div className='container'>\n                    <h1>{status.name}</h1>\n\n                    <section>\n                        <h2>Pairings</h2>\n                        <p>All times in {new Date(Date.now()).toString().slice(25)}</p>\n                        <table className='download-table full-width'>\n                            <thead>\n                                <tr>\n                                    <td style={{width: '27.5%'}}>White</td>\n                                    <td style={{width: '12.5%'}}>Link</td>\n                                    <td style={{width: '5%'}}></td>\n                                    <td style={{width: '10%'}}>Start Time</td>\n                                    <td style={{width: '5%'}}></td>\n                                    <td style={{width: '12.5%'}}>Watch Live</td>\n                                    <td style={{width: '27.5%'}}>Black</td>\n                                </tr>\n                            </thead>\n                            <tbody>                                \n                                {pairings.map((row, i) => {\n                                    let id = [row[0].trim(), row[1].trim()].join('.')\n                                    let w = playerDict.get(row[0].trim());\n                                    let b = playerDict.get(row[1].trim());\n                                    let link = Object.values(row[2]).find(v => v);\n                                    let matches = link?.match(regexes.chessCom) as RegExpMatchArray;\n                                    if (!matches) link = '';\n                                    else link = 'https://www.chess.com/club/matches/live/' + matches[1];\n                                    let time = matches && timeDict[matches[1]] ? timeDict[matches[1]][0] : 0;\n                                    let enforceBoards: number | undefined = matches && timeDict[matches[1]] ? timeDict[matches[1]][1] : undefined;\n                                    return (\n                                        <>\n                                            <tr key={['row', i].join('.')}>\n                                                <td><div className='playerName'>{w?.firstName}</div></td>\n                                                <td style={{padding: 0}}>\n                                                    {link ? <a className='button' href={link.trim()} target='_blank' rel='noopener noreferrer'>\n                                                        <FaLink />\n                                                    </a> : null}\n                                                </td>                                                \n                                                <td className={'bold'}>{w?.histories[round]?.game}</td>\n                                                <td>{time ? new Date(time).toString().slice(0, 21) : '-'}</td>\n                                                <td className={'bold'}>{b?.histories[round]?.game}</td>\n                                                <td style={{padding: 0}}>\n                                                    {link ? <div className='button' onClick={() => setExpanded(expanded ? '' : id)}>\n                                                        <img className='icon' src={icons.watch} alt={'Watch games'}/>\n                                                    </div> : null}\n                                                </td>\n                                                <td><div className='playerName'>{b?.firstName}</div></td>\n                                            </tr>\n                                            {link && expanded === id? <tr>\n                                                <td colSpan={100}>\n                                                    {row[2].chessComLink || row[2].chessComTeamLink ?\n                                                        row[2].chessComTeamLink ?\n                                                            <ChessCom matchURL={row[2].chessComTeamLink} enforceBoards={Number(enforceBoards)}/> :\n                                                            null :\n                                                        null\n                                                    }\n                                                </td>\n                                            </tr> : null}\n                                        </>\n                                    )\n                                })}\n                            </tbody>\n                        </table>\n                    </section>\n\n\n            </div>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Tournament from './Tournament';\nimport './App.css';\n\nfunction App(): ReactElement {\n  return (\n      <Router basename={process.env.PUBLIC_URL}>\n            <Route render={({location}) => {\n                return (\n                    <Switch location={location}>\n                        <Route exact path='/tournament/:id/' render={(props) => <Tournament {...props} />} />\n                    </Switch>\n                );\n            }}/>\n        </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}